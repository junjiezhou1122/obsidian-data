{"response":"--- Page 1 ---\n毕 业 设 计 （ 论 文 ） 题 目 ： 基于 React 的个性化学习资源导航平 台 姓 名 ： 周君杰 学 号 ： 2 1205020234 学 院 ： 电子与信息工程学院 专 业 ： 计算机科学与技术 指导老师 ： 张媛 完 成时 间： 202 5 年 5 月 30 日\n\n--- Page 2 ---\n摘 要 面对当前学习者在海量信息中难以有效筛选优质学习资源，以及普遍缺乏 对 “ 学习如何学习 ” 这一元认知能力的培养和指导 ，本项目旨在设计并实现一个 “ 基于 React 的个性化学习资源导航平台 ” 。 为突破传统教育体系仅侧重知识传 授的局限，该平台通过整合优化学习资源发现路径、并强调科学学习方法与高 效工具的应用指导， 从而 满足学习者的个性化需求和提升 其 自主学习 的 效率。 平台的核心功能围绕大学课程、网络课程、学习方法和学习工具四大模块构建， 并采用去中心化的分享模式， 使 用户 能够 参与资源的上传、编辑、讨论与协作， 从而促进 学习资源 的传播与应用 。 平台在技术上采用了前后端分离的现代 Web 架构。前端基于 React 库构建 单页应用 程序（ SPA ），结合 Wouter 进行轻量 级路由管理， 利用 TanStack Query 高效处理服务器状态及缓存，并通过 React Hook Form 与 Zod 保障表单数 据的有效性与一致性。后端系统则基于 Node.js 运行时环境及 Express.js 框架， 选用 了 PostgreSQL 进行数据持久化 。个性化推荐系统采用基于内容的推荐算法， 通过全面收集并分析用户的历史互动数据构建 精确 的用户画像，进而为用户精 准匹配并推荐高度相关的课程资源。 最终 通过单元测试、集成测试和端到端测 试 ， 确保了平台的稳定性 和 可靠性 。 关键词： 个性化学习 ； 学习资源导航； React ； Express.js\n\n--- Page 3 ---\nAbstract Addressing the current challenges learners face in effectively filtering high- quality learning resources from a vast amount of information, coupled with a general lack of cultivation and guidance in metacognitive skills — specifically, \"learning how to learn\" — this project aims to design and implement a \"Personalized Learning Resource Navigation Platform based on React.\" To break through the limitations of traditional education systems that primarily focus on knowledge transmission, the platform integrates and optimizes resource discovery paths while emphasizing guidance on scientific learning methods and efficient tools, thereby meeting learners' personalized needs and enhancing their self-directed learning efficiency. The platform's core functionalities are structured around four main modules: \"University Courses,\" \"Online Courses,\" \"Learning Methods,\" and \"Learning Tools.\" It employs a decentralized sharing model, enabling users to participate in the uploading, editing, discussion, and collaboration of resources, which in turn promotes the dissemination and application of learning resources. Technologically, the platform employs a modern web architecture with front-end and back-end separation. The front-end is built as a single-page application (SPA) using the React library, incorporating Wouter for lightweight routing, TanStack Query for efficient server state management and caching, and React Hook Form with Zod to ensure form data validity and consistency. The back-end system is based on the Node.js runtime environment and Express.js framework, and PostgreSQL was selected for data persistence. The personalized recommendation system employs a content-based recommendation algorithm. It constructs precise user profiles by comprehensively collecting and analyzing users' historical interaction data, thereby accurately matching and recommending highly relevant course resources to users. Finally, through unit, integration, and end-to-end testing, the platform's stability and reliability were ensured. Keywords : Personalized Learning; Learning Resource Navigation; React ; Express.js\n\n--- Page 4 ---\n目 录 第一章 绪论 ......................................................................................................... 1 1.1 课题研究的背景和意义 .................................................................................. 1 1.2 国内外研究现状 .............................................................................................. 2 1.2.1 国内研究现状 ....................................................................................... 2 1.2.2 国外研究现状 ....................................................................................... 2 1.3 课题研究 主要 内容 .......................................................................................... 3 第二章 相关技术与理论介绍 ............................................................................. 5 2. 1 前端技术体系 .................................................................................................. 5 2. 2 后端技术体系 .................................................................................................. 6 2. 3 代码管理 ......................................................................................................... 6 第三章 系统设计 ................................................................................................. 8 3.1 整体功能模块结构 .......................................................................................... 8 3.2 数据库设计 ..................................................................................................... 9 3. 2 .1 数据库表的设计 .................................................................................. 9 3. 2 . 2 数据库 E-R 图 .................................................................................... 17 3. 3 核心架构与全局状态 .................................................................................... 18 3.3.1 Language Context ............................................................................... 18 3.3.2 AuthContext ........................................................................................ 20 3. 4 主要页面与用户认证 .................................................................................... 21 3.4.1 注册 / 登录页面 ................................................................................... 21 3.4.2LearningHowtoLearn 页面 .................................................................. 22 3.4.3 LearningCenter 页面 ........................................................................... 23 3. 5 课程资源模块 ................................................................................................ 24 3.5.1 大学课程标签页 ................................................................................. 24 3.5.2 大学课程详情页 ................................................................................. 25 3.5.3 网络课程标签页 ............................................................................... 29 3. 6 学习方法与工具模块 .................................................................................... 30 3.6.1 学习方法标签页 ................................................................................. 30 3.6.2 学习工具标签页 ................................................................................. 31 3. 7 后端设计 ........................................................................................................ 31 3. 8 推荐算法 ........................................................................................................ 33 第四章 系统测试 ................................................................................................ 36\n\n--- Page 5 ---\n4.1 单元测试 ....................................................................................................... 36 4. 2 集成测试 ........................................................................................................ 38 4. 3 端到端测试 .................................................................................................... 39 第 五 章 总结与展望 ........................................................................................... 41 5 .1 全文 总结 ........................................................................................................ 41 5 . 2 未来展望 ........................................................................................................ 41 致谢 ..................................................................................................................... 42 参考文献 ............................................................................................................. 43 附录（部分程序代码） ..................................................................................... 45\n\n--- Page 6 ---\n1 第一章 绪论 1.1 课题研究的背景和意义 国际数据公司（ IDC ）的报告预测，全球数据总量在 2022 年至 2026 年间 将实现翻倍以上的增长 [1] 。 面对大量信息，学习者不仅面临着学习资源泛滥与 筛选的难题，也凸显了 掌握 “ 学习如何学习 ” 能力 的 重要 性 [2] 。 传统 的 教育系统 往往只 关注知识 的传授，而对学习的方法的系统性指导和 学习工具的有效利用关注不足 。 大多数学习者 缺乏科学 学习方法 的 指导， 所以 常常学习效率低下 。 根据 教育心理学研究，如 Dunlosky [3] 等人的综述， 已经 明 确 地 指出掌握有效的学习策略可以显著提高学习成效， 可是 这些研究成果往往 停留在学术层面， 并不能转换成普通学习者可以轻松应用的学习工具和方法 。 同时，网络学习资源虽然丰富，但由于数量庞大、资源质量参差不齐，使得学 习者也很难寻找到真正有价值的资料。 学习环境的个性化不足也是一个尚待解决的问题。每个学习者都有着自己 独特的背景知识，学习风格与习惯，因此通用的学习路径和方法难以满足所有 人的需求。 有研究表明， 当教学的方法与 个人 的 学习风格 相契合时 ，可以显著 提高学习效果 [4] 。 实现大规模的个性化学习系统的设计往往是困难的，尤其是 根据学习者的特点推荐合适的学习资源、学习方法和学习工具。学习者在自主 学习过程中通常也因为缺乏良好的反馈和有效的合作者而在学习中失败 ，而大 量研究表明，学习社区和协作环境对维持学习动机和提高 学习任务 完成率具有 关键作用 [5] 。 本研究构建的个性化学习资源推荐平台，其理论价值在于将认知心理学领 域一些已经验证的理论成果转化为应用，并在实践中探索个性化学习理论的有 效性。在实践应用层面，平台提供了高质量和个性化的学习资源，帮助用户克 服学习资源难以寻找以及学习资源质量参差不齐的困境，从而有效地提升学习 效率。 从社会贡献角度看，本平台致力于促进优质教育资源的共享与公平，通 过倡导自主与终身学习理念助力学习型社会建设，并通过学习经验的分享与传 承机制，推动学习模式的持续创新与发展。\n\n--- Page 7 ---\n2 1.2 国内外研究现状 1.2.1 国内研究现状 近年来，国内在构建综合性、个性化的学习支持系统方面取得了显著进展， 但若聚焦于特定功能的深度整合以及真正意义上的深度个性化体验，则仍有较 大的提升与探索空间。 以学堂在线、中国大学 MOOC 为代表的平台汇聚了大量课程资源，有效地 拓展了学习渠道 [6] 。然而这些平台主要侧重于自身课程库内容的呈现，对于学 习资源的导航和个性化推荐能力不足 [7] 。用户在面对海量但分散的大学课程和 网络课程时，仍然需要自己进行筛选，缺乏个性化的推荐。 在知乎、小红书等 内容平台 ，用户自发分享学习方法 和 学习工具的现象日 益普遍，形成了活跃的经验交流氛围。这些内容虽然具有一定的参考价值，但 普遍存在碎片化 [8] 、缺乏系统性 整 理和科学 有效性 验证的问题 。更 关键 的是， 这些平台 并非专门为学习平台而设计，因此缺乏有效的推荐机制。 以科大讯飞学习机 [9] 、松鼠 AI 为代表的智能化学习产品，在运用人工智能 技术实现个性化习题推荐及学习路径规划方面已取得显著成效，尤其在基础教 育阶段的学科辅导领域表现突出。但其核心功能多聚焦于特定学科知识点的掌 握，对于学习 方法 的培养 和 多样化学习工具的智能化推荐与使用指导 方面略显 不足。 1.2.2 国外研究现状 国外在个性化学习平台等方面研究较早，在理论研究和实际应用方面都有 着一定的进展，并因此有着丰富的实践成果和经验总结。 在线课程方面， Coursera 、 edX 和 FutureLearn 等平台通过提供大量课程和 证书认证 [10] ，促进了高质量资源的全球共享和知识传播普遍化。尽管如此，当 用户在利用此类平台进行课程选择的时候仍然面临着信息过载的挑战，平台在 如何指导有效筛选资源、选择合适的学习方法和学习工具方面，仍存在不足。 个性化学习和掌握性学习方面，国外已经有一些代表性的平台。如 Khan Academy 利用平台的自适应学习系统，可以根据学生的掌握程度来调整练习的\n\n--- Page 8 ---\n3 难度和学习的节奏，让用户在掌握中学习。 Math Academy 作为由人工智能驱动 的在线学习平台，该平台以 “ 掌握式学习 ” [11] 为核心理念，在用户开始学习前 通过智能评断来精准地定位用户的知识水平和学习起点，更加的聚焦于个性化 教学。这类系统虽然在特定学科领域中的个性化学习取得了一定的效果，但是 如何广泛迁移到其他领域，仍然值得探讨。 学习方法和工具方面，国外有着多样性的创新和实践。如 Less Wrong 和 Commoncog 等平台汇聚了关于认知科学方面的讨论和经验共享，提供了大量的 可学习资源。 Anki 和 Quizlet 等工具利用以 “ 间隔重复 ” [12] 为原理的算法，提 升了用户对于特定知识点的记忆和掌握。 Notion 和 EvenNote 等笔记软件为用户 构建个性化知识库提供了技术支撑。然而，这些优质的学习方法和学习工具在 实际应用中往往存在功能分散性，用户在使用时往往需要自己探索如何将其融 入自己的学习流程以及和科学的方法相结合。 1.3 课题研究 主要 内容 本课题 的研究任务在于个性化学习资源推荐 平台 的设计和实现 。 该平台旨 在帮助用户更便捷地发现优质学习资源，并更有效地运用科学的学习方法。 为 实现此目标，平台设计了大学课程，网络课程，学习方法和学习工具四个主要 模块。与其他平台单向传递学习资源和方法不同的是，本平台的去中心化的分 享方式让每个用户都有可能参与到课程，方法和工具的上传和讨论之中，从而 使得学习资源、方法和工具得以有效地传播应用。如图 1.1 所示。 大学课程模块：本研究通过整合国内外公开课作为基础，并允许用户上传 课程。为了确保课程信息和资源的完整性，平台允许任何注册的用户对课程信 息进行编辑以及对课程资源进行添加。对于在线学习中互动不足和缺乏指导的 问题，本模块还支持用户通过发起协作请求从而与他人合作完成课程。 网络课程模块：大学课程资源对于学科的覆盖度和资料的完备性常常有着 很大的不足。大多数学习者通常需要系统地学习某一领域的知识，而网络在线 课程通常有着更为完备的资源，能为学习者提供有力的支持。因此本模块主要 用于导航各大学习平台优质的网络课程，供用户进行访问和收藏。 学习方法和工具模块：研究发现，即使学习者得以接触优质的大学课程和\n\n--- Page 9 ---\n4 网络课程，最终的学习成效仍然会由于个体之间的学习方法和工具使用的不同 而造成学习效果的差距。由此，学习方法和工具模块构建了一个可供用户分享 和交流学习方法、学习工具的空间，帮助用户掌握 “ 学习如何学习 ” 的能力。 图 1.1 个性化学习 资源 推荐平台\n\n--- Page 10 ---\n5 第二章 相关技术与理论介绍 2. 1 前端技术体系 本平台前端是基于 React 库构建的单页应用程序（ SPA) [13] 。前端核心逻辑 主要通过 JavaScript 语言实现，并使用了第三方库以支持路由、状态管理及表 单处理等关键功能。 UI 层面，选用 TailWind CSS 框架，以实现自定义的样式设 计和页面布局。前端整体架构如图 2.1 所示。 图 2.1 前端技术架构 路由管理方面，项目使用了 Wouter 作为依赖库。 Wouter 提供了一种轻便的 路由解决方案，它牺牲了 React Router 的高级功能以及平台的广泛支持，换来 了更小的体积以及简单的 API ，使得在代码编写的过程中，路由逻辑的实现更 加的简洁。状态管理方面，本平台使用 TanStack Query 用于处理服务器状态的 获取、缓存、同步和更新。它简化了前端与后端 API 交互的过程，开发者仅需 定义数据的来源获取方式，库便会自动处理底层的请求和缓存等机制，可以有 效应对数据交互时候遇到的复杂问题，如数据一致和缓存失效。 在表单处理方面，代码中整合了 React Hook Form 和 Zod 确保了数据的有\n\n--- Page 11 ---\n6 效性和一致性。 React Hook Form 负责表单的状态管理和提交逻辑， Zod 为表单 提供了严格的数据结构定义和验证，这种组合从源头保证数据的安全性和准确 性。 UI 方面，平台主要依赖 TailWind CSS 。与传统的 UI 组件库不同，它是一 个原子化的 CSS 框架。这意味着它本身不提供直接可用的 UI 组件，而是提供 了一系列的 CSS 工具类供开发者进行组合构建用户界面。然而， TailWind CS S 在处理复杂的样式组合时可能会导致维护的不便。因此在本项目中还辅助运用 了全局 CSS 文件来弥补其在特定场景下的不足。 2. 2 后端技术体系 本平台后端系统基于 Node.js 运行时环境 之上 [14] ，其核心 Web 应用框架选 用 Express.js ，并全面采用 TypeScript 作为主要的开发语言。 Express.js 以其轻量 级和高度灵活的特性，为处理客户端 HTTP 请求、构建中间件以及组织 API 路 由提供了强大的支持，从而显著提升了整体的开发效率 [15] 。后端代码库整体采 用 TypeScript 编写， 它的 静态类型系统增强了代码的 稳定 性，并在数据处理过 程中提供了更强的类型安全保障，有效降低了 可能 的运行时 的 错误。在应用部 署阶段，选用 esbuild 作为编译工具，将 TypeScript 代码高效地转换为优化后 的 JavaScript 代码，确保了快速 地 构建与部署流程 [16] 。 数据库 层面，系统选用 PostgreSQL 作为数据库管理系统 [17] 。 为简化数据库 的部署， 本平台实现中使用了 NeonDB 云数据库 服务。后端与 PostgreSQL 数据 库之间的数据交互，通过 Drizzle ORM 实现。 Drizzle ORM 专为 TypeScript 设计， 使得数据访问代码 可以利用 TypeScript 语言的优势 。 后端整体架构如图 2.2 所示。 2. 3 代码管理 本 平台代码设计中 采用 Git 与 GitHub 构建协同代码管理流程。 Git 作为分 布式版本控制系统，精确 地 记录了 代码的每次变更，支持版本管理 和历史 回溯， 从而有效保障 平台的 稳定性 [18] 。 GitHub 作为远程代码仓库与协作平台，通过代 码共享、分支管理 和 合并请求等功能，促进了团队成员间的并行开发与有效沟 通，进而提升了整体开发效率。 GitHub 仓库如 图 2. 3 所示 。\n\n--- Page 12 ---\n7 图 2.2 后端整 体架构 图 2.3 GitHub 仓库\n\n--- Page 13 ---\n8 第三章 系统设计 3.1 整体功能模块结构 系统整体功能模块如图 3.1 所示 。 图 3.1 系统整体功能模块\n\n--- Page 14 ---\n9 3.2 数据库设计 本 平台 数据持久化方案使用 PostgreSQL 关系型 数据库 管理系统，其有着高 度的稳定和可靠性，为数据提供了安全的保证。为了简化数据库的使用， 本平 台在实际开发中集成了 NeonDB 提供的 serverless PostgreSQL 云数据库服务。 NeonDB 不仅完全兼容 PostgreSQL ，还提供了如自动扩展和数据恢复等功能。 3. 2 .1 数据库表的设计 用户表 (users) 包含了关于用户的各种信息，这些信息与用户的网页显示以 及登录方式密切相关。用户 id 为其提供了唯一的可识别标识，保证了每个用户 数据的独立性。如果用户使用了 Firebase 进行认证，这里会存储 Firebase 提供 的用户唯一 ID 。用户表还存储了用户的资料，例如用户的姓名和用户头像的链 接。用户表与其他表通过外键相结合，是数据库系统的核心，它为负责管理用 户的数据，同时也为其他表提供了基础。如表 3.1 所示。 表 3. 1 用户表 字段名称 数据类型 长度 字段含义 id int 11 用户 ID username varchar 255 用户名 password varchar 255 密码 email varchar 255 电子邮箱 first_name varchar 100 名字 last_name varchar 100 姓氏 created_at timestamp - 创建时间 phone_number varchar 50 电话号码 photo_url text - 头像 URL auth_provider varchar 50 认证提供商 provider_id varchar 255 认证提供商的用户 ID firebase_id varchar 255 Firebase 用户 ID 用户事件表 (user_events) 用于记录用户关于特定事件的安排，在本平台中主 要用于记录截止日期事件。每一个事件都有唯一的 id ，通过关联用户 id 来表明\n\n--- Page 15 ---\n10 事件与用户的联系。其记录了关于事件的基本信息，例如事件的标题、详细表 述和截止日期等，这些信息保证了用户事件表的全面性。如表 3.2 所示。 表 3. 2 用户事件表 字段名称 数据类型 长度 字段含义 id int 11 事件 ID user_id int 11 用户 ID title varchar 255 事件标题 description text - 描述 start_date timestamp - 开始时间 end_date timestamp - 结束时间 location varchar 255 地点 is_all_day tinyint 1 是否全天事件 (0= 否 , 1= 是 ) is_completed tinyint 1 是否已完成 (0= 否 , 1= 是 ) reminder_set tinyint 1 是否设置提醒 (0= 否 , 1= 是 ) reminder_time timestamp - 提醒时间 color varchar 20 事件颜色 (e.g., #RRGGBB) event_type varchar 50 事件类型 related_course_id int 11 关联课程 ID created_at timestamp - 创建时间 updated_at timestamp - 更新时间 网络课程表（ courses) 存储了各大在线课程平台课程的相关信息，它保存了 所有课程的详细数据，是网络课程模块的数据来源。同时，它也是用户推荐模 块的主要组成部分，为推荐算法提供了课程的相关信息。网络课程表的每个课 程都由 id 作为课程的唯一标识符。表中存储了课程的相关信息，例如课程的名 称、链接和主要介绍等，为平台提供了详细的数据支持。如表 3.3 所示。 表 3 .3 课程表 字段名称 数据类型 长度 字段含义 id int 11 课程 ID title text - 课程标题 url text - 课程 URL\n\n--- Page 16 ---\n11 续 表 3.3 课程表 字段名称 数据类型 长度 字段含义 short_intro text - 简短介绍 category varchar 255 分类 sub_category varchar 255 子分类 course_type varchar 100 课程类型 language varchar 50 语言 subtitle_languages json - 字幕语言 (JSON 数组 ) skills json - 技能 (JSON 数组 ) instructors json - 讲师 (JSON 数组 ) rating double - 评分 number_of_viewers int 11 观看人数 duration varchar 50 时长 site varchar 255 来源网站 image_url text - 图片 URL 大学课程表 （ university_courses) 是学习中心大学课程模块的数据来源。由于 大学课程数据结构与网络课程有着极大的不同，由此创建了大学课程表来弥补 其中的不足。大学课程表主要用于存储用户提供大学的课程信息，为大学课程 资源表等也提供了基础。大学课程表由 id 作为唯一的标识符，使用 university ， courseDept 等字段来记录便于对不同的大学课程进行识别。大学课程表中还包 含了课程的详细描述信息，确保用户在用户浏览这些大学课程的时候可以对课 程有一个粗略的了解。如表 3.4 所示。 表 3.4 大学课程表 字段名称 数据类型 长度 字段含义 id int 11 大学课程 ID university varchar 255 大学名称 course_dept varchar 100 课程系别 course_number varchar 50 课程编号 course_title text - 课程标题 description text - 描述\n\n--- Page 17 ---\n12 续 表 3.4 大学课程表 字段名称 数据类型 长度 字段含义 professors json - 教授 (JSON 数组 ) recent_semesters json - 最近学期 (JSON 数组 ) credits varchar 50 学分 url text - 课程 URL created_at timestamp - 创建时间 大学 课程资源表 ( university_course_resources ) 用来存储与特定大学课程相关 的各类学习资源。资源类型包括多种种类，用户可以上传各种类型的文件，也 可以上传相关资源的链接供其他用户使用。大学课程资源表中， id 是资源的唯 一标识符， course_id 关联相应的大学课程 id ， user_id 是上传资源的用户。其 用 title 记录资源的标题（例如： “ 第一周的讲义 ” ， “ 补充阅读材料 ” ），使 用 description 对资料进行详细的描述。如表 3.5 所示。 表 3. 5 大学课程资源表 字段名称 数据类型 长度 字段含义 id int 11 资源 ID course_id int 11 大学课程 ID user_id int 11 用户 ID ( 上传者 ) title varchar 255 资源标题 url text - 资源 URL ( 若外部链接 ) description text - 描述 resource_type varchar 50 资源类型 created_at timestamp - 创建时间 updated_at timestamp - 更新时间 tags json - 标签 (JSON 数组 ) file_path text - 文件存储路径 ( 若内部文件 ) file_name text - 原始文件名 file_size int 11 文件大小 (bytes) mime_type varchar 100 MIME 类型 大学课程评论表 ( u niversity_course_commen ts ) 和课程协作 ( university_course_\n\n--- Page 18 ---\n13 collaborations ) 。 大学课程评论表的 id 是评论的标识符， course_id 与相应的大学 课程相关联， user_id 与发表用户的 id 相关联。表中用 content 来存储用户发表 的评论内容，以及其他字段来完善大学课程评论表的内容。课程协作表用来记 录特定大学课程的合作请求， id 是协作记录的标识符， course_id 是相对应的大 学课程。其中 message 是用户发出协作请求的具体信息， contact_method 和 contact_details 存储了发起者的联系方式类型和具体的联系方式。大学课程评论 表主要用于服务课程内容的讨论，课程协作表主要用于用户之间为了共同的学 习目标而进行的协作活动。这两个表是大学课程互动部分的重要数据来源。如 表 3.6 和表 3.7 所示。 表 3.6 大学课程评论表 字段名称 数据类型 长度 字段含义 id int 11 大学课程评论 ID course_id int 11 大学课程 ID user_id int 11 用户 ID content text - 评论内容 created_at timestamp - 创建时间 updated_at timestamp - 更新时间 表 3.7 大学课程协作表 字段名称 数据类型 长度 字段含义 id int 11 协作 ID course_id int 11 大学课程 ID user_id int 11 用户 ID message text - 消息内容 contact_method varchar 100 联系方式类型 contact_details varchar 255 联系方式详情 created_at timestamp - 创建时间 updated_at timestamp - 更新时间 大学 课程链接表 ( university_course_links ) 将大学课程（ university_courses ) 的 相关外部链接存储在一起。通常，一个大学课程常常有很多相关的资源，不同\n\n--- Page 19 ---\n14 年份的大学课程也有着不同的课程链接。 id 是大学课程链接表的唯一标识符， course_id 关联大学课程的 id 表明链接属于大学课程。链接的 url 、标题和描述 提供了链接有关的信息。与大学课程资源表相比，课程链接表主要提供外部主 要课程网站的链接，而课程资源表则是用户上传的相关资源。如表 3.8 所示。 表 3.8 大学课程链接表 字段名称 数据类型 长度 字段含义 id int 11 链接 ID course_id int 11 大学课程 ID url text - 链接 URL title varchar 255 链接标题 description text - 描述 created_at timestamp - 创建时间 updated_at timestamp - 更新时间 学习方法 ( learning_methods ) 和学习方法评论表 ( learning_method_comments ) 。 学习方法表用于存储由用户上传的各种学习技巧。表中， id 是学习方法的唯一 标识符， user_id 是分享该学习方法的用户 id 。学习方法的主要内容包含标题、 描述和步骤，这些详细的信息为用户打造了一个切实可行的学习方法。学习方 法评论表用于存储学习方法讨论空间中的评论，其中 id 是评论的唯一标识符号， content 记录了评论的主要内容。如表 3.9 和表 3.10 所示。 表 3.9 学习方法表 字段名称 数据类型 长度 字段含义 id int 11 学习方法 ID user_id int 11 用户 ID title text - 标题 description text - 描述 steps json - 步骤 (JSON 数组 ) tags json - 标签 (JSON 数组 ) difficulty varchar 20 难度 time_required varchar 100 所需时间 benefits json - 益处 (JSON 数组 )\n\n--- Page 20 ---\n15 续 表 3.9 学习方法表 字段名称 数据类型 长度 字段含义 resources json - 资源 (JSON 数组 ) upvotes int 11 点赞数 views int 11 浏览量 created_at timestamp - 创建时间 updated_at timestamp - 更新时间 表 3.10 学习方法评论表 字段名称 数据类型 长度 字段含义 id int 11 评论 ID method_id int 11 学习方法 ID user_id int 11 用户 ID content text - 评论内容 created_at timestamp - 创建时间 updated_at timestamp - 更新时间 学习工具表 ( learning_tools ) 和学习工具评价表（ learning_too_reviews ) 。学习 工具表主要用于存储和管理各种有助于学习的工具信息。用户分享特定工具后， 其他用户可以根据自己的体验给工具一个星级评价。学习工具表中， id 是每个 学习工具的唯一数字 id ， user_id 是添加此工具的用户。表中使用名称、描述、 链接、类别和平台列表等一系列的资源来记录工具的核心信息。其中 pros 和 cons 是用户的评价参考信息。学习工具评价表主要存储用户对 learning_tools 表 中列出的学习工具进行评价和打分。 Id 是每条评价的唯一标识符， tool_id 和 user_id 分 别 关 联 相 应 的 工 具 和 发 表 此 评 论 的 用 户 。 这 两 个 表 相 互 结 合 ， learning_tools 表负责存储 “ 有什么工具 ” ， learning_tool_reviews 表存储负责 “ 这个工具怎么样 ” 。如表 3.11 和表 3.12 所示。 表 3. 1 1 学习工具表 字段名称 数据类型 长度 字段含义 id int 11 学习工具 ID user_id int 11 用户 ID\n\n--- Page 21 ---\n16 续 表 3. 1 1 学习工具表 字段名称 数据类型 长度 字段含义 name text - 工具名称 description text - 描述 url text - URL category varchar 100 分类 pricing varchar 100 价格 platforms json - 支持平台 (JSON 数组 ) pros json - 优点 (JSON 数组 ) cons json - 缺点 (JSON 数组 ) alternatives json - 替代品 (JSON 数组 ) upvotes int 11 点赞数 views int 11 浏览量 created_at timestamp - 创建时间 updated_at timestamp - 更新时间 表 3.12 学习工具评价表 字段名称 数据类型 长度 字段含义 id int 11 评价 ID tool_id int 11 学习工具 ID user_id int 11 用户 ID content text - 评价内容 rating int 11 评分 (1-5) created_at timestamp - 创建时间 updated_at timestamp - 更新时间\n\n--- Page 22 ---\n17 3. 2 . 2 数据库 E-R 图 为直观地展现本平台的数据结构和核心实体间的关系，绘制了数据实体关 系图（ E-R) 图，如图 3.2 所示。 E-R 图中，每一个矩形代表一个实体，实体名称标注于矩形内部。实体内 部列出了其包含的各种属性，并明确标示了主键。实体间的关系通过来先表示， 连接线两端通常会标注基数来说明实体之间对应的数量关系。例如，一个用户 可以发表多条大学课程评论，因此 users 表与 university_course_comments 表之 间通过 user_id 形成了 “ 一对多 ” 的关系。通过 E-R 图，可以更加全面地了解平 台的数据组织方式，为后续的开发提供了数据结构蓝图。 图 3. 2 数 据库 E-R 图\n\n--- Page 23 ---\n18 3. 3 核心架构与全局状态 本平台前端架构采用 React 作为核心框架，结合 TailwindCSS 实现了高效 的 UI 开发，同时通过自定义的 LanguageContext 实现了英文和中文的双语支持。 设计遵循原子设计原则，将组件从基础元素逐步组合成复杂功能模块，提高了 代 码 复 用 性 和 可 维 护 性 。 全 局 状 态 管 理 采 用 Context API 方 案 ， 通 过 AuthContext 和 LanguageContext 等上下文提供者实现高效状态分发，避免 了 props 传递的复杂性。组件库按功能类型进行分类存储，通用 UI 组件位于 /ui 目 录，特定功能的组件则放置在相应的功能目录中，如学习中心相关组件存放在 /learning-center 目录，所有页面级组件统一放置于 /pages 目录，形成清晰的代码 结构。数据获取层面应用 TanStack Query 管理服务器状态，实现了请求标准化 和智能缓存，减少了不必要的网络请求，避免了资源的浪费。 3.3.1 Language Context 本平台是一个面向国际用户的学习平台，多语言支持是提升用户体验和扩 大用户群体的关键因素。由此，本平台实现了一个高效的中英文语言切换系统， 通过自定义的 Context API 对全局语言的状态进行管理。该语言系统建立了一个 翻译字典，基本涵盖了所有用户界面的文本。如图 3.3 和 3.4 所示。 图 3. 3 英文版本 UI\n\n--- Page 24 ---\n19 图 3. 4 中 文版本 UI 技术实现上， LanguageContext 组件中首先定义了 LANGUAGES 常量对象， 明确标识支持的语言类型为英文和中文。紧接着构建了一个 translations 对象， 该对象以语言代码为键，包含了所需要翻译的文本。这些文本按照功能模块组 织，每一个模块都通过注释进行标注，便于维护和扩展。核心实现采用 Reac t 的 createContext 创建上下文，并通过 LanguageProvider 组件封装了状态管理逻 辑，最后通过 useLanguage 钩子封装上下文访问逻辑，便于其他组件使用此上 下文。设计框架如图 3.5 所示。 图 3. 5 LanguageContext 设计框架图\n\n--- Page 25 ---\n20 3.3.2 AuthContext AuthContext 为 React 提供了一个集中的用户认证状态管理方案，它封装了 用户注册、登录和第三方提供商进行认证的逻辑。组件可以通过 AuthContex t 来获取用户是否登录，当前用户的详细信息和获取后端数据时用于 API 验证的 认证令牌。为了保证用户的使用体验， AuthContext 还负责把用户成功登录后的 认证信息存储在 localStorage 中，避免用户在刷新页面后重新登录。 技术实现上， AuthContext 首先通过 createContext API 创建了一个上下文对 象。紧接着，创建了一个 AuthProvider 组件，它利用 useState 来管理用户信息、 认 证 令 牌 和 加 载 状 态 等 。 当 AuthProvider 挂 载 的 时 候 ， 它 首 先 会 尝 试 从 localStorage 获取用户的认证信息，如果用户是用第三方登录的，它还会调 用 HandleRedirectResult 来处理 OAuth 登录后的重定向。此外， AuthProvider 中定 义了 register 、 login 、 logout 等方法来完成认证操作。最后 AuthProvider 通 过 AuthContext.Provider 将所有的认证状态提供给子组件。为了方便其他组件对上 下文数据的访问，还提供了一个 useAuth 钩子。设计框架如图 3.6 所示。 图 3. 6 Auth Context 设计框架图\n\n--- Page 26 ---\n21 3. 4 主要页面与用户认证 3.4.1 注册 / 登录页面 在主页的 Header 组件中，未登录的用户会显示注册和登录按钮，用户可以 点击这些按钮分别进入注册或登录界面。当用户进入注册页面时，需要输入自 己的姓名、邮箱、用户名和密码来进行注册。在登录界面用户拥有更多的选择， 其不仅可以通过已经注册的账号进行登录，而且可以使用已经拥有的谷歌账号 和 GitHub 账号进行登录，这样的设计使得登录过程更加的简便，减去了注册的 繁杂的流程，给用户更多的选择。注册和登录 UI 如图 3.7 所示。 图 3.7 注册和登录 UI 代码设计中，主要分为 AuthModals 和 AuthContext 组件。 AuthModals 组件 负责登录的状态管理和认证逻辑的实现，而 AuthContext 负责 UI 的展示和交互， 它们之间通过 React 的 Context API 构成了一个完整的认证系统。 AuthContext 维护着几个关键的状态，包括用户信息（ user) ，认证令牌 （ token) ，加载状态（ loading) ，和认证状态（ isAuthenticated), 这些状态通 过 Context Provider 向下传递，使得 AuthModals 等组件可以方便地使用这些状态，\n\n--- Page 27 ---\n22 而不需要进行状态的管理。同时，系统使用 loacalStorage 来存储认证信息，确 保用户在刷新页面后通过本地存储的信息仍然能保持登录状态，增强了用户的 体验感。当用户在 AuthModals 中提交登录表单后， AuthModals 首先对表单进 行验证，然后调用 AuthContext 提供的 login 方法。处理认证请求后，如果认证 成功，则更新全局状态并且关闭登录模态框。 通过这种逻辑和 UI 分离式的设计，使得代码的结构更加清晰，便于增加更 多的第三方登录模块以及优化用户的使用体验。同时，第三方登录选择的引用， 确保了登录的安全性以及用户的便捷性。注册登录流程如图 3.8 所示。 图 3.8 注册 / 登录流程图 3.4.2 LearningHowtoLearn 页面 主页设计中，主要设计思想是将大的组件分成一个个小的组件进行设计， 最后通过对整体布局的设计把小的组件结合在一起形成完整的主页。本平台将 主页分为标头（ Header ）、标题介绍（ Title Introduction ）、左侧边栏（ Left Sidebar ）、标签内容（ Main Content ）和右侧边栏（ Right Sidebar ），页面组件 结构如图 3.9 所示。这种模块化的设计不仅使得布局更加清晰，也使得代码结 构更加简洁，便于对小组件的漏洞进行修复以及拓展新的功能。 Header 组件是页面的导航中枢，包含了用户也可浏览的其他页面。用户可 以通过该组件访问学习中心，分享与链接和聊天页面。 Header 组件还提供了语 言切换功能，用户可以点击地球形状的图标进行语言的切换，增强了不同国家\n\n--- Page 28 ---\n23 用户对网页使用的体验。在用户管理方面，可以通过点击头像图标进行账号的 登出以及查看个人资料和笔记。 左侧边栏采用标签式导航设计，通过点击不同的标签的时候，用户可以查 看相应的功能介绍，从而对本平台有一个更加完善地了解。助手功能为用户提 供了 AI 问答，让用户无需离开本平台就可以获得 AI 的帮助。 MainContent 组件用来显示不同标签页的内容，为用户提供相关功能模块的 介绍，让用户可以快速了解和使用本平台。 右侧边栏包含了两个主要功能：截止日期管理和推荐课程列表。在截止日 期管理模块中，用户可以通过添加截止日期来记录自己未来需要完成的学习任 务。在推荐课程列表中，其根据用户的课程收藏，点赞，发表的评论等历史数 据进行课程推荐，帮助用户发现符合个人学习需求的内容。 图 3. 9 页面组件结构 图 3.4.3 LearningCenter 页面 LearningCenter 页面是一个综合的学习中心，为用户提供了丰富的学习资源。 在页面结构方面， LearningCenter 主要包含三个部分：页面头部、标签导航和内 容区域。页面头部配有当前标签页面的标题和简短介绍，可以帮助用户快速了\n\n--- Page 29 ---\n24 解页面的主要功能。标签导航组件包含四个标签页：大学课程（ University Courses ）、在线课程（ Online Courses ）、学习方法（ Learning Methods ）和学 习工具（ Learning Tools ），如图 3.10 所示。内容区域根据标签页的不同展示相 应的内容，每个标签页的内容组件都是单独开发的，便于维护和拓展。 图 3. 10 标签导航组件图 3. 5 课程资源模块 3.5.1 大学课程标签页 大学课程标签页为用户提供一个浏览、讨论和上传大学课程的平台。主要 由 UniversityCoursesTab 、 UniversityCoursesHeader 、 UniversityCoursesFilters 、 UniversityCoursesCard 、 AddUniversityCourseDialog 、 UniversityCoursesPaginatio n 和 SimpleCSVUploader 部件组成。如图 3.11 所示。其中 UniversityCoursesTab 组 件主要负责确保其他组件的整合，以及课程上传逻辑的正确。 图 3.11 大学课程标签页 UniversityCoursesHeader 根据 UniversityCoursesTab 传来的认证状态来确认 用户是否有上传课程的功能，认证通过后用户可以使用 UniversiyCoursesHeade r\n\n--- Page 30 ---\n25 来访问 AddUniversittyCoursesDiaglog 和 SimpleCSVUploader 进行课程的上传， 两种不同的方式为用户提供了不同的需求。当用户想上传单个课程时，可以通 过 AddUniversityCoursesDialog 来上传，如果用户想批量上传课程，可以使 用 SimpleCSVUploader 的方法进行上传。平台开放用户课程上传功能，旨在打造 一个开放、协作的学习生态系统。通过汇聚来自不同背景和领域的课程贡献， 不仅能够丰富课程库的多样性，更能确保课程内容的质量和时效性。这种集体 智慧的模式使得让每一位用户都能成为知识的创造者和分享者。 UniversityCoursesFilters 组件中，用户可以根据自己的需求搜索课程，也可 以通过选择学校和部分来筛选课程， UniversityCoursesFilters 中主要使用 Searc h 组 件 和 Select 组 件 实 现 搜 索 和 筛 选 的 过 程 。 当 用 户 点 击 不 同 的 部 门 时 ， onDeptChange 函 数 会 自 动 被 执 行 ， 父 组 件 将 会 更 新 部 门 的 状 态 ， 使 useUniversityCoursesData 钩子重新运行来进行新的 API 请求，后端接受请求后 返回被筛选的数据使得 UI 可以更新新的数据给用户。 UniversityCoursesCard 组件主要由 CardHeader 、 CardContent 和 CardFoote r 三个组件组成，展示大学课程信息。 CardHeader 组件主要用来显示课程的名称 以及相应的大学和部门。 CardContent 组件用来显示课程的介绍，教授以及最新 的开课学期。用户可以点击 CardFooter 的课程详情按钮来查看课程具体的细节。 3.5.2 大学课程详情页 大学课程详情页面主要分为课程详情组件、资源组件和协同合作组件三个 主要部分。页面上方展示了课程的相关信息：课程的名称、部门和介绍等。页 面下方，用户可以通过导航访问这三个组件，如图 3.12 所示。 图 3.1 2 课程信息和选项卡导航\n\n--- Page 31 ---\n26 1. 课程详情标签页 课程详情标签页主要提供课程的核心信息，由评论组件，课程信息组件和 课程链接组件构成，如图 3.13 所示。 图 3.1 3 课程详情标签页 评论组件是课程详情页面的主要组成部分，目的是促进用户之间关于课程 的交流和知识的共享。在评论组件中用户可以对当前课程的具体内容展开讨论， 提出学习过程中遇到的问题以及分享自己的学习心得。评论列表中展现了所有 用 户 对 当 前 课 程 发 表 的 评 论 ， 每 一 条 评 论 由 用 户 信 息 、 评 论 内 容 （ comment.content ）和评论时间（ comment.createAt ）构成。评论列表的加载依 赖于 useQuery 钩子，当用户访问到特定的课程详情页时， useQuery 会以课程 的 ID 作为参数构建查询键，然后通过 API 向后端的大学课程端点请求评论数据。 对于已经登录的用户，组件提供一个基于 react-hook-form 和 zod 进行校验的表 单来发表新评论，由 useMutation 负责向后端发送 POST 请求，成功后会自动刷 新 评 论 列 表 。 同 样 ， 用 户 也 可 以 对 自 己 发 表 的 论 文 进 行 删 除 操 作 ， 由 useMutation 向后端发送 DELETE 请求。评论组件实现流程如图 3.14 所示。 课 程 信 息 组 件 位 于 课 程 详 情 标 签 页 的 侧 边 栏 区 域 ， 通 过 读 取 course.university 、 course.courseDept 、 course.courseNumber 等属性，将课程的大 学、院系、编号、授课教授和最近开设学期等信息列出 。 课程链接组件主要用于展示与课程有关的网页链接，它通过 useQuery 从\n\n--- Page 32 ---\n27 API 端点获取已经存在的链接列表。每个链接都会展示标题、描述和添加时间 等信息。对于已登录的用户，可以通过 “ 添加链接 ” 按钮进行课程有关链接的 添加。其功能由 Dialog 组件实现，实现方式与评论组件中添加或删除评论相似。 图 3.1 4 评论组件实现流程图 2. 资源中心标签页 资源中心标签页为用户提供了一个围绕特定课程共享学习资料的平台，主 要分为标头和资源展示两个部分，如图 3.15 所示。 资源中心标签页的标头部分清晰地描述了此模块的功能，并为已经登录的 用户提供了 “ 添加资源 ” 按钮。 “ 添加资源 ” 由 showResourcesDialog 组件实现， 允许用于提交不同类型的学习资源。课程资源的数据由 useQuery 以课程 ID 为 参数向后端获取。 3. 协同合作标签页 协同合作标签页的目的是促进特定课程学习者之间的合作与互助，主要分\n\n--- Page 33 ---\n28 为合作请求展示部分和补充信息部分，如图 3.16 所示。 图 3.1 5 资源中心标签页 图 3.1 6 协同合作标签页 在合作请求展示部分，已登录的用户可以看到 “ 发布合作请求 ” 按钮。发 布 合 作 请 求 由 showCollaborationDialog 组 件 实 现 ， 表 单 提 交 后 会 通 过 addCollaborationMutation 发送至后端 API ，成功后会重置表单信息并向用户显 示成功提示。页面下方以卡片列表的形式展示与此课程有关的协作请求，每张 卡片都清晰地显示了发布者的头像、名称和具体的协作信息。协作请求列表数 据由 useQuery （以 ['course-collaborations', id] 为键）向后端 API 获取。\n\n--- Page 34 ---\n29 3.5.3 网络课程标签页 网络课程标签页汇聚各个平台的课程，旨在为用户提供在线课程资源发现、 筛选和管理的环境，由搜索与筛选组件和课程展示组件构成，如图 3.17 所示。 搜索与筛选组件允许用户通过关键词进行精确查找，并可依据课程的综合 评分和受欢迎程度等信息对搜索结果进行排序。为了便于用户浏览课程列表， 页面提供了多维度筛选机制，涵盖了课程的分类、子分类和课程类型等属性。 这些选项数据通过与后端 API 进行数据交互，将符合用户筛选条件的课程显示 在课程列表界面上。 课程列表组件中课程信息由 Card 组件进行呈现，每张卡片包含课程的核心 数据，包括标题、分类、课程类型等信息。已登录的用户可以收藏和取消收藏 课程，此状态会实时同步到后端数据库。面对大规模的课程数据，页面底部集 成了分页组件，以避免课程加载速度过慢。 技术实现层面，所有与后端 API 的数据交互，包括课程列表的获取、筛选 条 件 的 动 态 加 载 、 用 户 收 藏 数 据 的 读 取 与 状 态 更 新 ， 都 通 过 useQuery 和 useMutation 钩子进行实现。用户操作的反馈则由 toast 通知服务进行呈现。 图 3.1 7 网络课程标签页\n\n--- Page 35 ---\n30 3. 6 学习方法与工具模块 3.6.1 学习方法标签页 学习方法标签页为用户提供了一个发现和分享各种学习技巧的互动平台， 如图 3.18 所示。页面顶部清晰地展示了此标签页的主题，并为已经登录的用户 提供了 “ 分享您的方法 ” 按钮。其由 showAddmethodDialog 组件实现，允许用 户分享自己的学习方法。筛选功能使用户可以通过难度级别和标签等多个维度 来筛选学习方法，同时用户可以根据自己的相关需求，通过搜索功能来进行查 询。搜索功能支持实时反馈，可以帮助用户快速找到所需要的内容。学习方法 以卡片列表的形式展示在页面中，每张卡片包含了方法的标题、简要描述和步 骤预览等信息以及一个导航到方法详情界面的 “ 查看详情 ” 按钮。 在代码实现层面，学习方法标签页的核心数据由 useQuery 通过后端 api （ api/learning-method ）异步获取的。该查询使用的 queryKey 包含了筛选条件和 当 前 视 图 等 参 数 （ 如 ['learning-methods', difficultyFilter, tagFilter, searchQuery, activeView, page, limit] ），从而保证任何相关状态变化时都可以自动进行数据更 新。分享方法时，采用了 React Hook From 和 Zod 实现表单验证，确保了数据 输入的准确性以及安全性。 图 3.18 学习方法标签页\n\n--- Page 36 ---\n31 3.6.2 学习工具标签页 学习工具标签页为用户提供了一个发现和分享各种学习工具的平台，这些 工具涵盖了笔记软件、闪卡和学术研究等类型，如图 3.19 所示。页面顶部清晰 地展示了其主题，为已经登录的用户提供 “ 分享工具 ” 的按钮，点击后会激活 一个模态对话框，允许用户上传新的学习工具。为了方便用户查找所需工具， 页面继承了搜索和筛选功能。学习工具以卡片形式在列表中展示，每张卡片包 含了工具的名称、价格和用户评分等信息，卡片展示的优先级由点赞数量决定。 在代码实现层面，学习工具标签页的核心数据 -- 工具列表和筛选选项， 由 useQuery 从后端的 API （ api/learning-tools ）获取。 useQuery 的查询将会包含筛 选条件和分页参数，确保用户在相关状态发生变化时页面自动刷新数据。当用 户分享工具时，弹出的模态对话框时基于 react-hook-form 和 zod 进行管理和验 证。工具的添加和删除等操作由 useMutation 钩子进行处理，这些狗仔向后 端 API 发出请求，并在成功后更新 UI 以及利用 toast 向用户反馈操作结果。 图 3.1 9 学习工具标签页 3. 7 后端设计 本平台的后端系统基于 Express.js 框架构建，使用 TypeScript 语言确保数据\n\n--- Page 37 ---\n32 类型的安全性。系统的功能模块包括用户认证和学习中心管理两个主要部分。 用户认证组件围绕一个基于 JSON Web Token (JWT) 的体系构建，该体系支撑了 包括用户注册、登录及令牌刷新能力在内的核心功能 [19] 。学习中心管理模块则 促进了教学内容的完整生命周期管理，涵盖了内容的创建、编辑、删除与查询 操作。 当用户在前端进行操作的时候，会触发一个网络请求 ( 比如获取数据，提交 表单等）。后端服务器首先解析前端的请求，当前端请求被解析过后，后端会 根据请求的 HTTP 方法（如 GET 、 POST 、 PUT 、 DELETE ）和 URL 路径，将 其路由到预先定义好的、负责处理这类请求的特定代码块。例如，在本平台中 假如用户发出一个 GET /api/learning-methods 的请求，这个请求会被路由到创建 学习方法的逻辑。值得注意的是，在请求到达具体的逻辑处理器之前，它可能 会经过一个或多个中间件的处理。中间件是一些可以访问请求对象（ req ） 、响 应对象（ res ）以及请求 - 响应周期中的下一个中间件函数的小块代码。 本平台中，一个关键的中间件是身份验证中间件。用户的请求通常都会到 达身份验证中间件，该中间件负责解释请求中携带的 JWT ，验证其有效性从而 对保护资源的访问进行有效地控制。 请求在经过所有中间件处理过后，由路由指定的处理器或者控制器来进行 接管。控制器的主要是协调用户请求的处理流程，它通常不直接执行复杂的业 务操作或数据库交互，而是将这些任务委托给服务层。如果本平台需要用到外 部服务，服务层还可能与第三方服务集成，例如登录时的 Google 和 Github 服 务商。 如果请求需要读取或者修改数据，服务层会与数据库进行交互，这通常通 过对象关系映射（ ORM ）工具或者直接的数据库驱动程式来完成。操作可能包 括查询数据，插入新数据，更新现有数据，删除数据。根据平台的需求，服务 层也有可能执行复杂的算法计算，例如本平台主页的推荐系统，其核心算法逻 辑就在后端实现。 当所有业务逻辑处理完成之后，服务层会将处理结果返回给控制器，控制 器根据处理结果构建一个 HTTP 响应发送回前端。此响应通常包含一个状态码 （如 200 OK, 201 Created, 400 Bad Request, 401 Unauthorized, 404 Not Found, 500\n\n--- Page 38 ---\n33 Internal Server Error 等）、响应头（如 Content-Type: application/json ）以及响应 体（通常为 JSON 格式的数据或错误信息）。最后，这个 HTTP 响应被发送回 前端，前端再根据响应内容更新用户界面，完成整个请求 - 响应周期。后端设计 流程如图 3.20 所示。 图 3. 20 后端设计流程图 3. 8 推荐算法 该算法的核心目标是根据用户的历史行为和偏好，为他们提供个性化且相 关的课程建议，从而提升学习的体验以及内容发现的效率 [20] 。推荐算法流程如 图 3.21 所示。 步骤一，全面收集和理解用户的各类互动数据，这些数据都是构建用户画 像的基石。由 generateRecommendations 方法通过异步并行查询（ Promise.all ） 从数据库中获取六个主要方面的数据。 通过调用 this.getBookmarksByUserId({ userId }) ，算法获取用户所有收藏的 课程。这是一个强烈的兴趣信号，直接表明了用户对特定课程的明确偏好和未 来学习意愿。收藏行为通常意味着用户经过筛选，认为该课程具有较高价值。\n\n--- Page 39 ---\n34 通过调用 this.getLearningPosts({ userId }) 获取用户创建的所有学习帖子。这些 帖子是用户学习过程和知识分享的体现。算法会检查这些帖子是否关联了特定 的课程 ID （代码中通过 (p as any).courseId 进行检查）。如果帖子与某一特定的 网络课程相关，那么该网络课程也将被视为用户可能感兴趣的内容。通过调 用 this.getLearningPostCommentsByUserId(userId) 和 this.getLearningPostLikesBy UserId(userId) 获取用户发表的评论和点赞记录。这些互动虽然不如直接收藏或 创建相关帖子那样强烈，但也间接反映了用户的兴趣点。算法会收集这些评论 和 点 赞 所 关 联 的 帖 子 ID (postId) ， 然 后 进 一 步 查 询 这 些 帖 子 的 详 情 （ 通 过 this.getLearningPost(id) ），并检查这些帖子是否也关联了课程 ID 。这样，即 使用户只是对某个讨论特定课程的帖子进行了互动，该课程也会被纳入兴趣范 围。 this.getSearchHistoryByUserId(userId) 返回用户的搜索记录。搜索查询词是 用户即时学习需求和兴趣方向的直接体现。这些关键词为了解用户正在积极探 索的知识领域提供了宝贵线索。 this.getAiConversationsByUserId(userId) 获取用 户与 AI 助手的对话记录。这些对话内容，尤其是用户的提问，往往包含了丰富 的学习主题、概念和具体问题，为推荐系统提供了数据的保证。 步骤二，在收集到用户的各类活动数据后，下一步就是构建一个能够代表 用户偏好的画像。这个画像主要是由两部分组成：用户互动过的课程的特征和 从文本内容中提取的关键词。算法首先会从用户的活动中收集到的所有课程 ID ， 并使用 set 数据结构进行去重，形成一个用户互动过的课程列表。同时，利用用 户互动的课程列表，算法会获取课程的详细信息来获取用户的互动记录。从互 动过的课程列表中，算法会提取结构化特征和非结构化特征。其中结构化特征 为课程的分类，子分类和技能等字段。这些结构化的元素能够清晰地描绘出用 户感兴趣的方向。算法同时也会算法会从用户的搜索历史查询词 ， AI 对话内容， 学习帖子内容以及帖子评论的内容中提取关键词。这些关键词通常包含用户的 兴趣特征。 步骤三，候选课程的生成与初步筛选。首先算法通过调用 this.getCourses 来 随机获取一个包含 200 门课程的候选池，同时为了避免向用户推荐他们已经互 动过或者可能学习的课程，算法也会移除互动课程列表中的课程。 步骤四，核心评分引擎（ scoreCourses 函数）。本阶段是推荐算法的核心，\n\n--- Page 40 ---\n35 scoreCoruses 负责为每一门的候选课程计算与用户画像匹配的分数，当分数越高 的时候也就代表这个课程与用户的兴趣和需求越契合。评分规则考虑到了多个 元素，如果候选课程的类别和子类别与用户画像比较匹配，那么相应的分也就 更高。对于关键词匹配，这部分的评分比较低，因为关键词匹配的精度可能不 如结构化数据。同时，其他一些课程的属性例如，高评分和高人气也会使得此 课程的总得分偏高。 步骤五，在所有的候选课程都经过评分后，算法需要对他们进行排序和格 式化来进行生成最终的推荐列表。同时，为了让推荐结果更加易于用户的理解， 算法还为每一条推荐生成一个推荐理由，这个理由是基于对课程分数贡献的最 大因素。例如，如果课程的评分高于 4.5 ，理由是 “ 您可能会喜欢的高分课程 ” 。 图 3. 21 推荐算法流程图\n\n--- Page 41 ---\n36 第四章 系统测试 本平台中，将测试分为三层：单元测试、集成测试和端到端测试。单元测 试用于验证独立组件和函数的正确性，集成测试用于测试关键模块之间的交互 和数据流，而端到端的测试主要用于模拟真实用户访问网站的情景。通过这种 测试方式，确保系统在运行时的稳定性。 4.1 单元测试 单元测试用于验证系统中独立组件的功能完整性，通过隔离测试每个功能 单元，确保他们可以在隔离的环境中能够正常工作 [21] 。 在实现单元测试过程中， 采用 Jest 测试框架结合 React Testing Library 进行前端组件的单元测试，确保各 个主要组件单独功能的有效性，测试案例如图 4.1 所示。 图 4. 1 测试案例示意图 认证功能测试验证登录弹窗的正确显示、有效与无效处理 和 社交媒体登录 功能， 保证 用户身份验证系统 的可靠性，部分测试代码如图 4.2 所示。 学习中\n\n--- Page 42 ---\n37 心标签页测试关注界面交互体验，验证标签页正确加载、默认状态准确 和 标签 切换的 有效 性 。 课程模块测试分为大学课程和网络课程两个部分，分别验证列表加载、搜 索和过滤功能的有效性。大学课程标签页测试 主要测试 课程添加和分页功能， 而网络课程测试则 关注 平台分类过滤、排序和收藏 的测试 。学习资源模块测试 包括学习方法和学习工具标签页， 用来 验证资源列表显示 和 分享功能的正确性。 详情页面测试 包含 大学课程、网络课程、学习方法 和 学习工具的详细信息 展示和交互功能。测试验证页面信息加载、收藏 / 点赞功能和评论 等功能 ， 保证 用户可以 有效地与内容互动。通过 以上 单元测试，我们确保每个独立组件能够 按照预期运行，为用户提供稳定 的使用 体验。 图 4. 2 登录功能测试代码\n\n--- Page 43 ---\n38 4. 2 集成测试 集成测试主要关注多个模块作为一个整体时的协同工作能力。与单元测试 仅仅专注于验证单个模块功能不同的是，集成测试的目标是检测组件之间的交 互能否按照预期进行，确保平台的各部分可以正确地集成在一起。本平台中对 学习中心、大学课程和学习工具等页面进行了集成测试，测试的流程基本一致， 下文以学习中心的集成测试为例进行阐述。 学习中心的集成测试中进行了多个层面的测试，主要包括：组件集成测试、 上下文集成测试、 API 集成测试和错误处理集成测试。 组 成 件 集 成 测 试 主 要 验 证 各 个 标 签 页 组 件 （ UniversityCoursesTab 、 OnlineCoursesTab 、 LearningMethodsTab 、 LearningToolsTab ）是否正确地与主页 面组件 LearningCenter 集成。其主要目的是保证用户在点击不同标签页时能够 正确显示相应的内容，同时隐藏其他的内容区域。代码将测试分解为两个部分， 第一部分确保页面加载时显示正确的标题和默认标签内容，第二部分确保切换 标签显示对应内容，部分代码如图 4.3 所示。 图 4. 3 页面加载测试代码\n\n--- Page 44 ---\n39 上下文集成测试专注于 LanguageContext 与 UI 组件之间的集成，它确保语 言切换功能可以正常工作，其前端 UI 能够正确地显示所选语言的文本。测试首 先检查英文内容，然后通过 useLanguage 模拟语言切换功能，最后验证 UI 能够 正确地显示中文，测试部分代码如图 4.4 所示。 API 集成测试用于验证前端组件和后端 API 服务之间的集成。它确保组件 能够正确调用 API 函数并处理其返回的数据。测试主要验证组件能否通过 AP I 加载数据。错误集成测试用于检查组件和错误处理功能的集成情况。它确保 当 API 调用失败的时候， UI 可以通过 toast 向用户显示错误信息。 图 4. 5 语言切换测试代码 4. 3 端到端测试 端到端测试通过模拟真实用户在浏览器中与平台的交互，来验证系统的各\n\n--- Page 45 ---\n40 个功能是否有效。众多的端到端测试工具中， Playwright 和 Cypress 由于其强大 的功能特性成为主流的端到端测试工具，根据对本系统主要功能的分析，平台 使用 Cypress 进行系统测试。 Cypress 可以直接在浏览器中运行测试，能够提供 快速和可靠的测试体验。开发人员可以使用 JavaScript 编写测试脚本，利 用 Cypress 提供的 API 来定位特定的元素和执行一系列操作。值得一提的是， Cypress 还提供了实时重新加载功能，当代码变动时测试会重新运行，确保平台 的稳定和有效性。 本平台主要对学习中心的四个核心组件：大学课程、网络课程、学习方法 和学习工具进行了测试。通过模拟真实用户的行为对四个标签页的主页面和详 情页面进行全面测试，确保用户界面的交互功能可以正常运行。测试框架如 图 4.6 所示。测试代码主要分为四个部分：基础导航测试、详情页面测试、流程导 航测试和搜索与筛选测试。基础导航测试主要验证学习中心的标签页切换功能， 这是整个测试的基础，确保用户可以在不同的标签页之间进行切换。详情页面 测试分别对四个标签页的详情页面进行测试，主要检查详情页面的内容显示以 及交互，确保用户在进入详情页面后能够正常操作。流程导航测试用于模拟用 户从进入网站到浏览不同的模块，再查看详情页面的完整流程，这种端到端的 流程最接近真实用户的浏览过程。搜索与筛选测试主要针对各组件的搜索和筛 选功能进行测试，确保用户能够通过筛选条件和搜索查询到所需要的学习资源。 图 4. 6 端到端测试框架图\n\n--- Page 46 ---\n41 第 五 章 总结与展望 5 .1 全文 总结 本毕业设计成功开发了一个基于 React 的个性化学习资源导航平台。平台 针对当代学习者所面临的问题开发了大学课程，网络课程，学习工具和学习方 法这四个主要模块解决学习者学习资源不足以及学习效率低下的问题。在分析 国内外相关平台的不足后，明确了本平台核心功能的需求，基本解决了学习者 的主要问题。在平台设计方面，采用了前后端分离的架构，前端使用了 Reac t 和 Vite 作为主要技术，后端主要使用了 Node.js 和 Express.js 框架，并且使用 了 PostgreSQL 数据库进行数据管理。平台的四大模块不仅支持用户查看其他用户 分享的内容，还支持用户上传和分享高质量的内容，构建了一个去中心化的学 习平台。平台的个性化推荐系统使用了基于内容的推荐算法，根据用户过往的 行为而构建用户画像，从而精准推荐相关课程。最后，系统还使用单元、集成 和端到端的系统测试，确保平台运行的稳定性和用户的使用体验。 5 . 2 未来展望 本平台虽然解决了一些问题但仍然存在众多不足，未来可以从以下几个方 面对本平台进行进一步的优化和扩展。 （ 1 ） 本平台的推荐算法为基于内容的推荐算法，未来可以将机器学习和深 度学习等技术应用于推荐系统，同时搜集更多的用户数据和内容特征，实现更 加精准的个性化推荐。 （ 2 ） 用户虽然可以编辑任何一个大学课程，但是平台并没有记录编辑的历 史版本，在未来可以使用维基百科类似的技术，实现大学课程编辑历史版本的 记录和审查机制，防止用户恶意对课程进行破坏。 （ 3 ） 平台应当与更多的教育机构进行合作，丰富平台的资源库。同时应该 开放 API 接口，允许其他平台与本平台相结合，共同构建更加完善的学习系统。\n\n--- Page 47 ---\n42 致谢 时光匆匆，这四年似乎过得很快，转眼间就到了要毕业的时候。在大学的 学习中，最令我感谢的是校园图书馆，大学四年几乎有一半的时间都在那里度 过。从最开始的为了应付期末考试到因为自己的兴趣而去学习，这中间经历了 太多太多。感谢高盛元的唐诗导读课，让我第一次感受到学习的乐趣，第一次 真正开始对学习萌发兴趣。感谢村上春树等人的书籍让我开始主动地进行阅读。 感谢哔哩哔哩上的记忆技巧视频，让我第一次感受到人的学习能力是可以改变 的。感谢所有我阅读过的有关认知心理学的内容，这极大促进了我的学习效率 以及对学习的兴趣。感谢本科时选择的计算机专业，让我获得优质的资源更加 容易。 论文选题过程中，大学四年的学习经历极大影响了我的选题内容。感谢刘 金宇同学在平台代码编写过程中的 倾力协作 和辛勤付出，共同促进了此平台的 完成。论文撰写过程中，感谢张媛教授 在我论文写作的各个阶段所给予的耐心 指导 ， 提出了许多宝贵的意见和建议。更以严谨认真的态度对所指导的学生开 了许多次大大小小的会议，令我心生感激。 感谢一路上来遇到的人们，无论如何你们的点点滴滴都可能影响着我，或 者在生命的某一刻给我带来了欢乐。谢谢我的朋友们，他们始终相信我和鼓励 我，无条件地给予了我许许多多的帮助。谢谢我的姑姑们，大学四年中经常去 他们家游玩，给予了我很多的照顾。谢谢我的父母，你们总是支持我的所有决 定，让我站在巨人的肩膀看世界。最后谢谢我自己，谢谢你一路走来没有放弃 自己想要做的事情，以及希望未来的你能够继续做自己热爱的事情。\n\n--- Page 48 ---\n43 参考文献 [1] Rydning J. Worldwide IDC Global datasphere forecast, 2022 – 2026: enterprise organizations driving most of the data growth[R]. International Data Corporation, 2022. [2] Pintrich P R. The role of metacognitive knowledge in learning, teaching, and assessing[J]. Theory into Practice, 2002, 41(4): 219-225. [3] Dunlosky J, et al. Improving students learning with effective learning techniques: Promising directions from cognitive and educational psychology[J]. Psychological Science in the Public Interest, 2013, 14(1): 4-58. [4] Pashler H, et al. Learning styles: Concepts and evidence[J]. Psychological Science in the Public Interest, 2008, 9(3): 105-119. [5] Loes C N. Applied learning through collaborative educational experiences[J]. New Directions for Higher Education, 2019, 2019(188): 13-21. [6] 李辉 . 国内知名 MOOC 平台资源现状研究 [J]. 软件导刊 ,2020,19(07):253- 256. [7] 宋莉 . 面向在线学习的个性化学习资源推荐系统设计 [J]. 兰州工业学院学 报 ,2023,30(04):85-90. [8] 邱超超 . 智媒时代大学生碎片化学习现状及优化策略探析 [J]. 科技传 播 ,2025,17(07):167-172. [9] 卢兵 .AI 辅助让孩子学习更高效 科大讯飞 AI 学习机 T10[J]. 计算机与网 络 ,2021,47(14):20-21. [10] 王诗润 . 全球六大 MOOC 平台课程建设研究 [D]. 云南大学 ,2023. [11] 高紫旋 . 美国：鼓励教师采取 “ 掌握式学习 ” 缩小学生学业差距 [J]. 人民教 育 ,2022,(17):20. [12] 杨涛 . 利用闪卡记忆类软件提高中小学生记忆效率 [J]. 中国信息技术教 育 ,2018(23):72-74. [13] 敖 曼 . 基 于 react 实 现 前 端 组 件 化 开 发 的 研 究 与 实 现 [J]. 长 江 信 息 通 信 ,2021,34(07):77-80.\n\n--- Page 49 ---\n44 [14] 黎 青 霞 .Node. js 在 Web 开 发 中 的 应 用 研 究 [J]. 信 息 记 录 材 料 ,2024,25(10):91-93 , 96. [15] 程桂花 , 沈炜 , 何松林等 .Node.js 中 Express 框架路由机制的研究 [J]. 工业 控制计算机 ,2016,29(08):101-102. [16] 赵卓 .TypeScript 全栈开发 [M]. 人民邮电出版社 , 2023. [17] Ahmed I .PostgreSQL 数据库的特点 [J]. 软件和集成电路 ,2021,(06):63. [18] 石 庆 冬 . 版 本 管 理 工 具 Git 的 主 要 特 点 [J]. 电 子 技 术 与 软 件 工 程 ,2022,(07):72-75. [19] 陈宇收 , 饶宏博 , 王英明等 . 基于 JWT 的前后端分离程序设计研究 [J]. 电脑 编程技巧与维护 ,2019,(09):11-12. [20] 林杰 . 基于数据分析的个性化推荐系统优化方法研究 [J]. 信息记录材 料 ,2025,26(05):232-234. [21] Zhu H, Hall P A V, May J H R. Software unit test coverage and adequacy[J]. ACM Computing Surveys, 1997, 29(4): 366-427.\n\n--- Page 50 ---\n45 附录（部分程序代码） // 学习中心代码如下： import React, { useState } from \"react\"; import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"; import { BookOpen, Lightbulb, Compass, Globe } from \"lucide-react\"; import UniversityCoursesTab from \"@/components/learning- center/UniversityCoursesTab\"; import LearningMethodsTab from \"@/components/learning- center/LearningMethodsTab\"; import LearningToolsTab from \"@/components/learning- center/LearningToolsTab\"; import OnlineCoursesTab from \"@/components/learning- center/OnlineCoursesTab\"; import { useLanguage } from \"@/contexts/LanguageContext\"; const LearningCenter = () => { const [activeTab, setActiveTab] = useState(\"university-courses\"); const { t } = useLanguage(); return ( <div className=\"p-4 max-w-6xl mx-auto\"> <div className=\"mb-8\"> <h1 className=\"text-4xl font-extrabold text-orange-800 mb-2\"> {t(\"learningCenter\")} </h1> <p className=\"text-gray-600\"> {t(\"comprehensiveHub\")} </p> </div> <Tabs value={activeTab} onValueChange={setActiveTab} className=\"mb- 6\"> <TabsList className=\"grid grid-cols-4 mb-8 bg-orange-50 p-1\"> <TabsTrigger value=\"university-courses\" className=\"data-[state=active]:bg-gradient-to-br data- [state=active]:from-orange-500 data-[state=active]:to-amber-500 data- [state=active]:text-white rounded-md flex items-center gap-2\" > <BookOpen className=\"h-4 w-4\" /> <span className=\"hidden sm:inline\">{t(\"universityCourses\")}</span> <span className=\"sm:hidden\">{t(\"uniShort\")}</span> </TabsTrigger> <TabsTrigger\n\n--- Page 51 ---\n46 value=\"online-courses\" className=\"data-[state=active]:bg-gradient-to-br data- [state=active]:from-orange-500 data-[state=active]:to-amber-500 data- [state=active]:text-white rounded-md flex items-center gap-2\" > <Globe className=\"h-4 w-4\" /> <span className=\"hidden sm:inline\">{t(\"onlineCourses\")}</span> <span className=\"sm:hidden\">{t(\"onlineShort\")}</span> </TabsTrigger> <TabsTrigger value=\"learning-methods\" className=\"data-[state=active]:bg-gradient-to-br data- [state=active]:from-orange-500 data-[state=active]:to-amber-500 data- [state=active]:text-white rounded-md flex items-center gap-2\" > <Lightbulb className=\"h-4 w-4\" /> <span className=\"hidden sm:inline\">{t(\"learningMethodsTitle\")}</span> <span className=\"sm:hidden\">{t(\"methodsShort\")}</span> </TabsTrigger> <TabsTrigger value=\"learning-tools\" className=\"data-[state=active]:bg-gradient-to-br data- [state=active]:from-orange-500 data-[state=active]:to-amber-500 data- [state=active]:text-white rounded-md flex items-center gap-2\" > <Compass className=\"h-4 w-4\" /> <span className=\"hidden sm:inline\">{t(\"learningTools\")}</span> <span className=\"sm:hidden\">{t(\"toolsShort\")}</span> </TabsTrigger> </TabsList> <TabsContent value=\"university-courses\" className=\"px-1\"> <UniversityCoursesTab /> </TabsContent> <TabsContent value=\"online-courses\" className=\"px-1\"> <OnlineCoursesTab /> </TabsContent> <TabsContent value=\"learning-methods\" className=\"px-1\"> <LearningMethodsTab /> </TabsContent> <TabsContent value=\"learning-tools\" className=\"px-1\"> <LearningToolsTab /> </TabsContent> </Tabs>\n\n--- Page 52 ---\n47 </div> ); }; export default LearningCenter; // 推荐算法部分代码： async generateRecommendations( userId: number, limit: number, offset: number ): Promise<(UserRecommendation & { course: Course })[]> { // Aggregate user interactions const [bookmarks, posts, comments, likes, searchHistory, aiConvos] = await Promise.all([ this.getBookmarksByUserId(userId), this.getLearningPosts({ userId }), this.getLearningPostCommentsByUserId(userId), this.getLearningPostLikesByUserId(userId), this.getSearchHistoryByUserId(userId), this.getAiConversationsByUserId(userId), ]); // Collect all course IDs the user has interacted with const interactedCourseIds = new Set<number>(); bookmarks.forEach((b) => interactedCourseIds.add(b.courseId)); posts.forEach((p) => { if ((p as any).courseId) interactedCourseIds.add((p as any).courseId); }); const postIdSet = new Set<number>(); comments.forEach((c) => { if (c.postId) postIdSet.add(c.postId); }); likes.forEach((l) => { if (l.postId) postIdSet.add(l.postId); }); const postIdArr = Array.from(postIdSet); let relatedPosts: any[] = []; if (postIdArr.length > 0) { relatedPosts = await Promise.all(postIdArr.map((id) => this.getLearningPost(id))); relatedPosts.forEach((p) => { if (p && (p as any).courseId) interactedCourseIds.add((p as any).courseId); }); } const allCourseIds = Array.from(interactedCourseIds).filter(Boolean); const interactedCourses = allCourseIds.length > 0 ? await this.getCoursesByIds(allCourseIds) : []; const categories = new Set<string>(); const subCategories = new Set<string>(); const skills = new Set<string>(); interactedCourses.forEach((course) => {\n\n--- Page 53 ---\n48 if (course.category) categories.add(course.category); if (course.subCategory) subCategories.add(course.subCategory); if (course.skills) course.skills.split(\",\").forEach((skill) => skills.add(skill.trim())); }); const keywords = new Set<string>(); searchHistory.forEach((s) => { if ((s as any).searchQuery) (s as any).searchQuery.split(/\\s+/).forEach((word: string) => keywords.add(word.toLowerCase())); }); aiConvos.forEach((c) => { if (Array.isArray((c as any).messages)) { (c as any).messages.forEach((m: any) => { if (m.content) m.content.split(/\\s+/).forEach((word: string) => keywords.add(word.toLowerCase())); }); } }); posts.forEach((p) => { if (p.content) p.content.split(/\\s+/).forEach((word: string) => keywords.add(word.toLowerCase())); }); comments.forEach((c) => { if (c.content) c.content.split(/\\s+/).forEach((word: string) => keywords.add(word.toLowerCase())); }); if (likes.length > 0) { const likedPosts = await Promise.all(likes.map((l) => this.getLearningPost(l.postId))); likedPosts.forEach((p) => { if (p && p.content) p.content.split(/\\s+/).forEach((word: string) => keywords.add(word.toLowerCase())); }); for (const p of likedPosts) { if (p) { const postComments = await this.getLearningPostCommentsByPostId(p.id); postComments.forEach((c) => { if (c.content) c.content.split(/\\s+/).forEach((word: string) => keywords.add(word.toLowerCase())); }); } } } const userProfile = { categories, subCategories, skills, keywords }; const candidateCourses = await this.getCourses({ limit: 200 }); const filteredCandidates = candidateCourses.filter((c) => c.id && !interactedCourseIds.has(c.id)); function scoreCourse(course: Course): number { let score = 0;\n\n--- Page 54 ---\n49 if (course.category && userProfile.categories.has(course.category)) score += 2; if (course.subCategory && userProfile.subCategories.has(course.subCategory)) score += 1.5; if (course.skills) course.skills.split(\",\").forEach((skill) => { if (userProfile.skills.has(skill.trim())) score += 1; }); const text = `${course.title} ${course.shortIntro || \"\"}`.toLowerCase(); userProfile.keywords.forEach((kw) => { if (text.includes(kw)) score += 0.2; }); if (course.rating && course.rating > 4.5) score += 0.5; if (course.numberOfViewers && course.numberOfViewers > 10000) score += 0.3; return score; } // Score and sort candidates deterministically const scored = filteredCandidates.map((course) => ({ course, score: scoreCourse(course) })); scored.sort((a, b) => b.score - a.score || a.course.id - b.course.id); // Build recommendations in-memory only const recommendations: (UserRecommendation & { course: Course })[] = scored.map(({ course, score }) => { let reason = \"Based on your learning activity\"; if (course.category && userProfile.categories.has(course.category)) reason = `Similar to your interests in ${course.category}`; else if (course.rating && course.rating > 4.5) reason = \"Highly rated course you might enjoy\"; else if (course.numberOfViewers && course.numberOfViewers > 10000) reason = \"Popular with many learners\"; return { userId, courseId: course.id, score, reason, trending: !!course.numberOfViewers && course.numberOfViewers > 50000, course, id: 0, // Not persisted createdAt: new Date(), updatedAt: new Date(), }; }); // Optionally, cache/store top 10 recommendations in DB for analytics // for (const rec of recommendations.slice(0, 10)) {\n\n--- Page 55 ---\n50 // await this.createUserRecommendation({ userId, courseId: rec.courseId, score: rec.score, reason: rec.reason, trending: rec.trending }); // } // Return paginated slice return recommendations.slice(offset, offset + limit); }","elapsed_time_ms":0}